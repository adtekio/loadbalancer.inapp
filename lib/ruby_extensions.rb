# -*- coding: utf-8 -*-
class NilClass
  def blank?
    true
  end
end

class Object
  # Call method on object if-and-only-if the object is not nil.
  #
  # method_name - name of the method to call
  # *args - (optional) list of arguments to pass to the call.
  #
  # Example
  #     object.try(:strftime, "%y")
  #     => nil
  #
  # Returns nil if the object was nil or if the method call returned nil.
  def try(method_name, *args)
    nil? ? nil : send(method_name, *args)
  end

  # Test the blankness of a string. A string is blank if it's Nil or
  # if it's empty, i.e. "".
  #
  # No Argument
  #
  # Example
  #     "".blank?
  #     => true
  #
  # This converts the object to its string representation and checks whether that
  # is blank. Nil is blank because its string representation is "".
  def blank?
    to_s.blank?
  end

  # Convert object to string, assume it contains comma separated values, and map
  # the array using the given block.
  #
  # fldsep - field separater, default is /,/. Needs to be a regular expression.
  # block - (optional) yielded to for each value and result is returned
  #
  # Example
  #     "1,2,3".split_map { |a| a.to_i }
  #     => [1,2,3]
  #
  # Returns array split using the field separator. Optionally, any block given is
  # yielded to for each element and resulting array is returned.
  def split_map(fldsep = /,/, &block)
    r = to_s.split(fldsep).map(&:strip)
    block_given? ? r.map(&block) : r
  end
end

class Array
  # Sum over all entries in the array.
  #
  # No arugment.
  #
  # Example
  #     [1,2,3].sum
  #     => 6
  #
  # Returns the sum, either float or integer, over all entries. If a object
  # in the array does not respond to '+' then there will be an exception.
  def sum
    inject(0) { |result,value| result + value }
  end
end

class Integer
  # Intrepret the value in hours and return the corresponding number of seconds.
  #
  # No arguments.
  #
  # Example
  #     10.hours
  #     => 36000
  #
  # Returns the number of seconds if this value is intrepreted as being this many
  # hours.
  def hours
    self * 60 * 60
  end

  def days
    self.hours * 24
  end
end

class String

  # Convert a timestamp string to date. This assumes that the timestamp string
  # was generated by DateTime#strftime("%Y%m%d%H%M%S")
  #
  # No arguments
  #
  # Example
  #     "20120426200201".to_date_string
  #     => "26-04-2012 20:02:01"
  #
  # Return a string with formatted differently.
  def to_date_string
    gsub(/(....)(..)(..)(..)(..)(..)/, '\3-\2-\1 \4:\5:\6')
  end

  # Remove erronanous international prefix that is included in the scanned
  # representation of a barcode. Because DHL has extended shipment codes for
  # international shipments, these shipments, when scanned, seem to be prefixed
  # with '+C1', this is then removed.
  #
  # No Argument.
  #
  # Example
  #     "+C100".remove_intl_prefix
  #     => "00"
  #
  # Check and remove the prefix.
  def remove_intl_prefix
    self.sub(/^[+]C1/,'')
  end
end

class Range
  def to_json(*a)
    {
      'json_class'   => self.class.name,
      'data'         => [ first, last, exclude_end? ]
    }.to_json(*a)
  end

  def self.json_create(o)
    new(*o['data'])
  end
end
